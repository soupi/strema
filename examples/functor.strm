type List a =
	 | Nil {}
	 | Cons { head : a, tail : List a }
end

type Maybe a =
	 | Nothing {}
	 | Just a
end

def maybes :=
	{ map = fun(f, m) ->
	  case m of
	  	   | Nothing {} -> Nothing {}
		   | Just x -> Just (f(x))
	  end
	}

def lists :=
	{ map = fun(f, l) ->
	  case l of
	  	   | Nil {} -> Nil {}
		   | Cons { head = head, tail = tail } ->
		     Cons { head = f(head), tail = (lists.map)(f, tail) }
	  end
	}

def map(clas, f, obj) := (clas.map)(f, obj)

def main() := do
   ffi("console.log", map(maybes, (fun(x) -> add(x,1)), Just 1))
   ffi("console.log", map(lists, (fun(x) -> add(x,1)), Cons { head = 1, tail = Nil {} }))
end
