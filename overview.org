* Strema
** Features
*** Variants
Variants are data constructors with some data attached to them.

They tag the data so it can be distinguished from different variants
in the data definition.

For example in Haskell:

#+BEGIN_SRC haskell
data Definition
  = Variable Var Expr
  | Function Var [Var] Sub
#+END_SRC

Here we define a new data type named ~Definition~ which has two possible representations,
either a ~Variable~ with two specific types attached to it, or a ~Function~ with three.

In Strema variants must have exactly one type attached to them.

We will compile variants to javascript using objects. A variants schema is going to be:

#+BEGIN_SRC haskell
{ _tag: <String>, _field: <Expr> }
#+END_SRC

We prefix with underscore to avoid name collisions with records.

When we pattern match on variants we will check the tag to see if we're looking at the right variant,
and then check its field.

*** Pattern matching
Pattern matching is a way to implement control flow.

We examine the shape of a value and decide what to do accordingly.

In Haskell it looks like this:

#+BEGIN_SRC haskell
case mydef of
  Variable var expr ->
    JS.Variable var (translateExpr expr)
  Function var args body ->
    JS.Function var args (translateSub body)
#+END_SRC

Pattern matching can be represented using:

1. An expression on which we will match on
2. A list of patterns and their respected result

A pattern can be one of the following:

- A wildcard, denoted as underscore, will succeed for any expression and will not bind anything in the scope of the result
- A variable, will succeed for any expression and will bind the data in place to that variable in the result
- A literal, will succeed if the expression in the same place is a literal of the same value
- A variant, which will succeed if the matched data is of the same tag and the pattern it holds matches as well
- A record, which will succeed if the matched data is a record which has all of the fields in the pattern and they match.

We will compile pattern matching into several if statements that if succeeds will call a function
with the matched variables and return from there.

We will also need to generate fresh variables for the variables we match on.
*** Records
Records in strema are anonymous and first class.

Implementing them is straightforward because JavaScript already has objects.

Selecting a specific field in a record is simple, just use .field syntax.
Strema will also use this syntax.

Record extension is slightly more tricky - since records in strema are immutable,
we need to first copy the record, mutate it, and return that.

Also, changing the type of a field is OK is strema.

- ~{ x = 7 }.x~ should result in ~7~

#+BEGIN_SRC haskell
let r = { x = 7, y = 0.0 }
{ x = "hello" | r }
#+END_SRC

should result in ~{ x = "hello", y = 0.0 }~.
*** Built-ins
We want to be able to run some native JavaScript operations,
We can use the ~EFfi~ constructor to generate normal javascript functions,
But we need a new constructor for binary operations.
*** Type inference
Strema is statically typed, and has global type inference.
Statically typed means any expression has a type, known before the program runs.
Type inferred means we don't need to write type annotations.

Our type inference algorithm works in stages:

First, we *elaborate* the AST and collect *constraints*.
Then, we solve these constraints and get back a *substitution*.
We go over the AST again, replacing the type variables we added in the elaboration stage
with concrete types.
**** 1. Elaboration and Constraints Collection
*Elaboration* means annotating the AST with types, if we can deduce the type
from the tree structure, we annotate that AST node with the type we know.
If we don't, we generate a new type variable name and annotate the tree with that.
Usually in those cases that we don't know the type of the expression, we can sort of
have a rough idea what it might be, for example: a ~EFunCall f args~ tells us that
~f~ /should be/ a function.

A *constraint* means some restriction about a type. Our most common constraint
is going to be ~Equality~ - two types should represent the same type.

After going over the AST, generating and assigning types for each node and collecting
all of the constraints on those types, we *solve* the constraints.
**** Constraints solving
We go over the constraints and replace type variables with the types they represent
according to the constraints, and check that the types match.

For example, if we see ~Equality (TypeVar "t1") (TypeCon "Int")~, we can go over the
rest of the constraints and replace ~t1~ with ~Int~.

And if we see ~Equality (TypeCon "Int") (TypeCon "String")~, we throw a type error,
because the two types do not match.

We also collect all of these replacements (or substitutions) we did into a mapping
from type variables to types. This mapping is called *a substitution*.
**** Substitute
After we've successfully created a substitution without generating an error, we apply
this substitution back into our AST and get our correctly type annotated AST.



**** Let Polymorphism
Let polymorphism gives us the ability to use a generic function in more contexts.

For example, ~id~ is a function that can work for ~x~ of any type. But our algorithm
collects constraints globally, including that:

#+BEGIN_SRC haskell
def id := fun(x) -> x

def one := id(1)          -- constrain that the type of id *is equal to* the type [Int] -> tN

def hello := id("hello")  -- constrain that the type of id *is equal to* the type [String] -> tM
#+END_SRC

We need to invent a new constraint that will define the relationship between the type of id
and the parameters passing to it as an *Instance of* relationship.

~InstanceOf t1 t2~ relationship means that ~t1~ is an *instantiation* of ~t2~.
What we'll do is copy the type of ~t2~, generate new type variables in place of all type variables
inside of it, and then say that this new type ~t3~ has an equality relationship with ~t1~.

It's important to solve the equality constraints for each function before solving the InstanceOf
constraints, so that when we instantiate we already have the final type of the function.

We will highjack the ~Ord~ instance deriving (constructors defined later are bigger)
and the fact that ~Set~ is ordered to accomplish that.

