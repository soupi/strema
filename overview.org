* Strema
** Features
*** Variants
Variants are data constructors with some data attached to them.

They tag the data so it can be distinguished from different variants
int the data definition.

For example in Haskell:

#+BEGIN_SRC haskell
data Definition
  = Variable Var Expr
  | Function Var [Var] Sub
#+END_SRC

Here we define a new data type named ~Definition~ which has two possible representations, either a ~Variable~ with two specific types attached to it, or a ~Function~ with three.

In Strema variants must have exactly one type attached to them.

We will compile variants to javascript using objects. A variants schema is going to be:

#+BEGIN_SRC haskell
{ _tag: <String>, _field: <Expr> }
#+END_SRC

We prefix with underscore to avoid name collisions with records.

When we pattern match on variants we will check the tag to see if we're looking at the right variant, and then check its field.

*** Pattern matching
Pattern matching are a way to implement control flow.

We examine the shape of a type and decide what to do accordingly.

In Haskell it looks like this:

#+BEGIN_SRC haskell
case mydef of
  Variable var expr ->
    JS.Variable var (translateExpr expr)
  Function var args body ->
    JS.Function var args (translateSub body)
#+END_SRC

Pattern matching can be represented using:

1. An expression which we will match on
2. A list of patterns and their respected result

A pattern can be one of the following:

- A wildcard, denoted as underscore, will succeed for any expression and will not bind anything in the scope of the result
- A variable, will succeed for any expression and will bind the data in place to that variable in the result
- A literal, will succeed if the expression in the same place is a literal of the same value
- A variant, which will succeed if the matched data is of the same constructor and the pattern it holds matches as well
- A record, which will succeed if the matched data is a record which has all of the fields in the pattern and they match.

We will compile pattern matching into several if statements that if succeeds will enter a function with the matched variables and return from there.

We will also need to generate fresh variables for the variables we match on.
*** Records
Records in strema are anonymous and first class.

Implementing them is straightforward because JavaScript already has objects.

Selecting a specific field in a record is simple, just use .field syntax.
Strema will also use this syntax.

Record extension is slightly more tricky - since records in strema are immutable,
we need to first copy the record, mutate it, and return that.

Also, changing the type of a field is OK is strema.

- ~{ x = 7 }.x~ should result in ~7~

#+BEGIN_SRC haskell
let r = { x = 7, y = 0.0 }
{ x = "hello" | r }
#+END_SRC

should result in ~{ x = "hello", y = 0.0 }~.
*** Built-ins
We want to be able to run some native JavaScript operations,
We can use the ~EFfi~ constructor to generate normal javascript functions,
But we need a new constructor for binary operations.
